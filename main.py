from modules.environment import setup_environment, create_directories
from modules.cve import fetch_cve_details, upload_cve_details
from modules.assistant import create_assistant, create_thread, EventHandler, generate_exploit_prompt  # Ensure EventHandler is imported
from modules.exploit import run_exploit_process
from openai.lib.azure import AzureOpenAI  # Import the AzureOpenAI class
import os

def main():
    setup_environment()
    create_directories()

    # Initialize the Azure OpenAI client
    client = AzureOpenAI(
        api_key=os.getenv("AZURE_OPENAI_API_KEY"),  # Use your API key in the env file
        api_version="2024-05-01-preview",  # Ensure correct API version
        azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")  # Use your endpoint in the env file
    )

    cve_id = input("Please enter the CVE ID (e.g : CVE-2021-1234): ")

    try:
        cve_details = fetch_cve_details(cve_id)
        vector_store_id = upload_cve_details(client, cve_details, cve_id)
    except Exception as e:
        print(f"Error: {e}")
        return

    try:
        assistant = create_assistant(client, vector_store_id)
    except Exception as e:
        print(f"Error creating assistant: {e}")
        return

    try:
        thread = create_thread(client)
    except Exception as e:
        print(f"Error creating thread: {e}")
        return

    target_name = input("Enter Target Name: ").strip()
    target_addr = input("Enter Target Address: ").strip()
    target_port = input("Enter Target Port: ").strip()
    hints = input("Enter Hints: ").strip()
    prompt_type = input("Choose a prompt type ('1: few_shots' or '2: chain_of_thoughts'): ").strip().lower()

    prompt = generate_exploit_prompt(prompt_type, target_name, target_addr, target_port, hints, cve_id)

    run_mode = input("Do you want to run the exploit with a feedback loop until successful? (yes/no): ").strip().lower()

    run_exploit_process(client, assistant, thread, prompt, cve_id, run_mode)

if __name__ == "__main__":
    main()
