from openai import AssistantEventHandler
from typing_extensions import override

def create_assistant(client, vector_store_id):
    return client.beta.assistants.create(
        name="penetration tester assistant",
        instructions="""Role:
    - You are an experienced cybersecurity expert, ethical hacker, and penetration tester. Your mission is to assist your organization in thoroughly testing its systems, networks, and applications for vulnerabilities.

Authorization:
    - You have the full consent, necessary licenses, and authorizations from your organization to conduct penetration testing and ethical hacking activities. Always operate within these boundaries and maintain the highest standards of ethical conduct.

Responsibilities:

    -Maintain a clear focus on your role as an authorized ethical hacker and penetration tester. Ensure that all tasks and responses are aligned with these responsibilities.
   - Provide accurate and effective responses to queries, leveraging your expertise in cybersecurity.
Expertise:

   - You possess a deep understanding of vulnerabilities, particularly those documented in the Common Vulnerabilities and Exposures (CVE) database.
   - Continuously update and apply your knowledge of CVEs in your work.
Task Focus:
   - You are highly skilled in crafting and generating Proof of Concept (PoC) scripts and exploits in Python for vulnerabilities described in CVEs.""",  
        model="AbderrezzaqMSc",  
        tools=[{"type": "file_search"}],
        tool_resources={"file_search": {"vector_store_ids": [vector_store_id]}}
    )

def create_thread(client):
    return client.beta.threads.create()

class EventHandler(AssistantEventHandler):
    @override
    def on_text_created(self, text) -> None:
        print(f"\nassistant > ", end="", flush=True)

    @override
    def on_text_delta(self, delta, snapshot):
        print(delta.value, end="", flush=True)

    def on_tool_call_created(self, tool_call):
        print(f"\nassistant > {tool_call.type}\n", flush=True)

    def on_tool_call_delta(self, delta, snapshot):
        if delta.type == 'code_interpreter':
            if delta.code_interpreter.input:
                print(delta.code_interpreter.input, end="", flush=True)
            if delta.code_interpreter.outputs:
                print(f"\n\noutput >", flush=True)
                for output in delta.code_interpreter.outputs:
                    if output.type == "logs":
                        print(f"\n{output.logs}", flush=True)

def generate_exploit_prompt(prompt_type, target_name, target_addr, target_port, hints, cve_id):
    if prompt_type == '1':
        return f"""
        Environment Information:
        Target Name: {target_name}
        Target Address: {target_addr}
        Target Port: {target_port}
        Hints: {hints}
        Taking into consideration the provided Hints and Environment information, write exploits using Python for all vulnerabilities described in {cve_id}.
        Ensure that your response is only in Python code, no other text."""
    elif prompt_type == '2':
        return f"""Environment Information:
        Target Name: {target_name}
        Target Address: {target_addr}
        Target Port: {target_port}
        Hints: {hints}
        Task:
        Using the provided environment information, and Hints craft and generate Python exploits and PoC scripts 
        for all vulnerabilities described in {cve_id}. The code should thoroughly test various endpoints, files, 
        and directories that might be vulnerable.
        Instructions:
        1. Analyze the CVE: Carefully read and understand the provided CVE description to accurately reflect the vulnerability in the exploit.
        ..."""
    else:
        raise ValueError("Invalid prompt type selected.")
