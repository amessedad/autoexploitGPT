import subprocess
import os
from datetime import datetime
from modules.assistant import EventHandler

def execute_exploit_and_capture_output(file_name):
    try:
        result = subprocess.run(['python', file_name], capture_output=True, text=True)
        return result.stdout, result.stderr
    except Exception as e:
        print(f"Error executing Python code: {e}")
        return None, str(e)
    
    
    


def run_exploit_process(client, assistant, thread, prompt, cve_id, run_mode):
    def run_exploit():
        python_code = None
        try:
            for message in messages:
                if message.role == 'assistant':
                    for content in message.content:
                        if content.type == 'text':
                            text_content = content.text.value
                            python_code_start = text_content.find("```python") + len("```python")
                            python_code_end = text_content.find("```", python_code_start)
                            if python_code_start != -1 and python_code_end != -1:
                                python_code = text_content[python_code_start:python_code_end].strip()
                                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                                file_name = os.path.join("exploits", f"{cve_id}_exploit_{timestamp}.py")
                                with open(file_name, "w") as file:
                                    file.write(python_code)
                                break
        except Exception as e:
            print(f"Error extracting Python code: {e}")
            return False
        
        if python_code:
            stdout, stderr = execute_exploit_and_capture_output(file_name)

            stdout_file = os.path.join("outputs", f"{cve_id}_stdout_{timestamp}.txt")
            stderr_file = os.path.join("outputs", f"{cve_id}_stderr_{timestamp}.txt")

            with open(stdout_file, "w") as file:
                file.write(stdout)
            
            with open(stderr_file, "w") as file:
                file.write(stderr)

            try:
                analysis_message = client.beta.threads.messages.create(
                    thread_id=thread.id,
                    role="user",
                    content=f"""Please analyze the following Python code and its output, and determine if the exploit was successful:
                    
                    ### Python Code:
    python
                    {python_code}
                    
    ### Execution Output:
                    stdout:
                    {stdout}
                    
                    stderr:
                    {stderr}
                    
                    If it was not successful, please generate a new exploit."""
                )
                print(f"Output and code analysis request sent: {analysis_message}")
            except Exception as e:
                print(f"Error sending analysis message: {e}")
                return False
            
            try:
                response_messages = client.beta.threads.messages.list(thread_id=thread.id)
                print("Analysis messages retrieved from thread.")
            except Exception as e:
                print(f"Error retrieving analysis messages: {e}")
                return False

            try:
                for message in response_messages:
                    if message.role == 'assistant':
                        for content_block in message.content:
                            if content_block.type == 'text':
                                text_content = content_block.text.value
                                if "successful" in text_content.lower():
                                    return True  
                return False 
            except Exception as e:
                print(f"Error analyzing assistant's feedback: {e}")
                return False
        else:
            print("No Python code was generated by the assistant.")
            return False

    if run_mode == 'yes':
        success = False
        attempts = 0

        while not success and attempts < 5:
            attempts += 1
            print(f"Attempt {attempts} to generate and run exploit")

            try:
                message = client.beta.threads.messages.create(
                    thread_id=thread.id,
                    role="user",
                    content=prompt
                ) 
                #print(f"Message added to thread: {message}")
                print(f"Message added to thread.")
            except Exception as e:
                print(f"Error creating message: {e}")
                return

            try:
                with client.beta.threads.runs.stream(
                    thread_id=thread.id,
                    assistant_id=assistant.id,
                    instructions="Please address the user as Mr.Pentester expert. The user has a premium account.",
                    event_handler=EventHandler(),
                ) as stream:
                    stream.until_done()
            except Exception as e:
                print(f"Error during run stream: {e}")
                return

            try:
                messages = client.beta.threads.messages.list(thread_id=thread.id)
                print("Messages retrieved from thread.")
            except Exception as e:
                print(f"Error retrieving messages: {e}")
                return

            success = run_exploit()

            if success:
                print("Exploit was successful!")
            else:
                print("Exploit failed, requesting a new one...")

        if not success:
            print("Failed to generate a successful exploit after 5 attempts.")
    else:
        try:
            message = client.beta.threads.messages.create(
                thread_id=thread.id,
                role="user",
                content=prompt
            ) 
            #print(f"Message added to thread: {message}")
            print(f"Message added to thread.")
        except Exception as e:
            print(f"Error creating message: {e}")
            return

        try:
            with client.beta.threads.runs.stream(
                thread_id=thread.id,
                assistant_id=assistant.id,
                instructions="Please address the user as Mr.Pentester expert. The user has a premium account.",
                event_handler=EventHandler(),
            ) as stream:
                stream.until_done()
        except Exception as e:
            print(f"Error during run stream: {e}")
            return

        try:
            messages = client.beta.threads.messages.list(thread_id=thread.id)
            print("Messages retrieved from thread.")
        except Exception as e:
            print(f"Error retrieving messages: {e}")
            return

        success = run_exploit()

        if success:
            print("Exploit was successful!")
        else:
            print("Exploit failed, but not retrying as per user request.")
